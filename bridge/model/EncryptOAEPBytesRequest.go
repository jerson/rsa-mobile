// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package model

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type EncryptOAEPBytesRequest struct {
	_tab flatbuffers.Table
}

func GetRootAsEncryptOAEPBytesRequest(buf []byte, offset flatbuffers.UOffsetT) *EncryptOAEPBytesRequest {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &EncryptOAEPBytesRequest{}
	x.Init(buf, n+offset)
	return x
}

func FinishEncryptOAEPBytesRequestBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsEncryptOAEPBytesRequest(buf []byte, offset flatbuffers.UOffsetT) *EncryptOAEPBytesRequest {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &EncryptOAEPBytesRequest{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedEncryptOAEPBytesRequestBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *EncryptOAEPBytesRequest) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *EncryptOAEPBytesRequest) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *EncryptOAEPBytesRequest) Message(j int) byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetByte(a + flatbuffers.UOffsetT(j*1))
	}
	return 0
}

func (rcv *EncryptOAEPBytesRequest) MessageLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *EncryptOAEPBytesRequest) MessageBytes() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *EncryptOAEPBytesRequest) MutateMessage(j int, n byte) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateByte(a+flatbuffers.UOffsetT(j*1), n)
	}
	return false
}

func (rcv *EncryptOAEPBytesRequest) Label() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *EncryptOAEPBytesRequest) Hash() Hash {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return Hash(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *EncryptOAEPBytesRequest) MutateHash(n Hash) bool {
	return rcv._tab.MutateInt32Slot(8, int32(n))
}

func (rcv *EncryptOAEPBytesRequest) PublicKey() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func EncryptOAEPBytesRequestStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func EncryptOAEPBytesRequestAddMessage(builder *flatbuffers.Builder, message flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(message), 0)
}
func EncryptOAEPBytesRequestStartMessageVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(1, numElems, 1)
}
func EncryptOAEPBytesRequestAddLabel(builder *flatbuffers.Builder, label flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(label), 0)
}
func EncryptOAEPBytesRequestAddHash(builder *flatbuffers.Builder, hash Hash) {
	builder.PrependInt32Slot(2, int32(hash), 0)
}
func EncryptOAEPBytesRequestAddPublicKey(builder *flatbuffers.Builder, publicKey flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(publicKey), 0)
}
func EncryptOAEPBytesRequestEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
