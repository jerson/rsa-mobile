// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package model

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type EncryptPrivateKeyRequest struct {
	_tab flatbuffers.Table
}

func GetRootAsEncryptPrivateKeyRequest(buf []byte, offset flatbuffers.UOffsetT) *EncryptPrivateKeyRequest {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &EncryptPrivateKeyRequest{}
	x.Init(buf, n+offset)
	return x
}

func FinishEncryptPrivateKeyRequestBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsEncryptPrivateKeyRequest(buf []byte, offset flatbuffers.UOffsetT) *EncryptPrivateKeyRequest {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &EncryptPrivateKeyRequest{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedEncryptPrivateKeyRequestBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *EncryptPrivateKeyRequest) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *EncryptPrivateKeyRequest) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *EncryptPrivateKeyRequest) PrivateKey() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *EncryptPrivateKeyRequest) Password() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *EncryptPrivateKeyRequest) Cipher() PEMCipher {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return PEMCipher(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *EncryptPrivateKeyRequest) MutateCipher(n PEMCipher) bool {
	return rcv._tab.MutateInt32Slot(8, int32(n))
}

func EncryptPrivateKeyRequestStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func EncryptPrivateKeyRequestAddPrivateKey(builder *flatbuffers.Builder, privateKey flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(privateKey), 0)
}
func EncryptPrivateKeyRequestAddPassword(builder *flatbuffers.Builder, password flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(password), 0)
}
func EncryptPrivateKeyRequestAddCipher(builder *flatbuffers.Builder, cipher PEMCipher) {
	builder.PrependInt32Slot(2, int32(cipher), 0)
}
func EncryptPrivateKeyRequestEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
