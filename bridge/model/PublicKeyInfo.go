// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package model

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type PublicKeyInfo struct {
	_tab flatbuffers.Table
}

func GetRootAsPublicKeyInfo(buf []byte, offset flatbuffers.UOffsetT) *PublicKeyInfo {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &PublicKeyInfo{}
	x.Init(buf, n+offset)
	return x
}

func FinishPublicKeyInfoBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsPublicKeyInfo(buf []byte, offset flatbuffers.UOffsetT) *PublicKeyInfo {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &PublicKeyInfo{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedPublicKeyInfoBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *PublicKeyInfo) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *PublicKeyInfo) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *PublicKeyInfo) BitLen() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *PublicKeyInfo) MutateBitLen(n int64) bool {
	return rcv._tab.MutateInt64Slot(4, n)
}

func (rcv *PublicKeyInfo) Size() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *PublicKeyInfo) MutateSize(n int64) bool {
	return rcv._tab.MutateInt64Slot(6, n)
}

func (rcv *PublicKeyInfo) E() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *PublicKeyInfo) MutateE(n int64) bool {
	return rcv._tab.MutateInt64Slot(8, n)
}

func PublicKeyInfoStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func PublicKeyInfoAddBitLen(builder *flatbuffers.Builder, bitLen int64) {
	builder.PrependInt64Slot(0, bitLen, 0)
}
func PublicKeyInfoAddSize(builder *flatbuffers.Builder, size int64) {
	builder.PrependInt64Slot(1, size, 0)
}
func PublicKeyInfoAddE(builder *flatbuffers.Builder, e int64) {
	builder.PrependInt64Slot(2, e, 0)
}
func PublicKeyInfoEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
