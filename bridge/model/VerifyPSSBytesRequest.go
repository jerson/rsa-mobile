// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package model

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type VerifyPSSBytesRequest struct {
	_tab flatbuffers.Table
}

func GetRootAsVerifyPSSBytesRequest(buf []byte, offset flatbuffers.UOffsetT) *VerifyPSSBytesRequest {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &VerifyPSSBytesRequest{}
	x.Init(buf, n+offset)
	return x
}

func FinishVerifyPSSBytesRequestBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsVerifyPSSBytesRequest(buf []byte, offset flatbuffers.UOffsetT) *VerifyPSSBytesRequest {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &VerifyPSSBytesRequest{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedVerifyPSSBytesRequestBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *VerifyPSSBytesRequest) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *VerifyPSSBytesRequest) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *VerifyPSSBytesRequest) Signature(j int) byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetByte(a + flatbuffers.UOffsetT(j*1))
	}
	return 0
}

func (rcv *VerifyPSSBytesRequest) SignatureLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *VerifyPSSBytesRequest) SignatureBytes() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *VerifyPSSBytesRequest) MutateSignature(j int, n byte) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateByte(a+flatbuffers.UOffsetT(j*1), n)
	}
	return false
}

func (rcv *VerifyPSSBytesRequest) Message(j int) byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetByte(a + flatbuffers.UOffsetT(j*1))
	}
	return 0
}

func (rcv *VerifyPSSBytesRequest) MessageLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *VerifyPSSBytesRequest) MessageBytes() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *VerifyPSSBytesRequest) MutateMessage(j int, n byte) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateByte(a+flatbuffers.UOffsetT(j*1), n)
	}
	return false
}

func (rcv *VerifyPSSBytesRequest) Hash() Hash {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return Hash(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *VerifyPSSBytesRequest) MutateHash(n Hash) bool {
	return rcv._tab.MutateInt32Slot(8, int32(n))
}

func (rcv *VerifyPSSBytesRequest) SaltLength() SaltLength {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return SaltLength(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *VerifyPSSBytesRequest) MutateSaltLength(n SaltLength) bool {
	return rcv._tab.MutateInt32Slot(10, int32(n))
}

func (rcv *VerifyPSSBytesRequest) PublicKey() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func VerifyPSSBytesRequestStart(builder *flatbuffers.Builder) {
	builder.StartObject(5)
}
func VerifyPSSBytesRequestAddSignature(builder *flatbuffers.Builder, signature flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(signature), 0)
}
func VerifyPSSBytesRequestStartSignatureVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(1, numElems, 1)
}
func VerifyPSSBytesRequestAddMessage(builder *flatbuffers.Builder, message flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(message), 0)
}
func VerifyPSSBytesRequestStartMessageVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(1, numElems, 1)
}
func VerifyPSSBytesRequestAddHash(builder *flatbuffers.Builder, hash Hash) {
	builder.PrependInt32Slot(2, int32(hash), 0)
}
func VerifyPSSBytesRequestAddSaltLength(builder *flatbuffers.Builder, saltLength SaltLength) {
	builder.PrependInt32Slot(3, int32(saltLength), 0)
}
func VerifyPSSBytesRequestAddPublicKey(builder *flatbuffers.Builder, publicKey flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(publicKey), 0)
}
func VerifyPSSBytesRequestEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
